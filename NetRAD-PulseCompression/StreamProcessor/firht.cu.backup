//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%% Module: FIR Filter Hilbert Transform Approximator %%%%%%%%%%%%%
//%%%%%%%%%%%%%% Author: Lerato J. Mohapi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%% Institute: University of Cape Town %%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <cutil_inline.h>

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%% Including the Kernel: FIR Filter Calculator %%%%%%%%%%%%%%%%%%%%%%%%%%
#include "firht_kernel.cu"

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%% Forward Declaraton of: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%% C Function the Does FIR Filter for Comparison %%%%%%%%%%%%%%%
extern "C"
void firfilterhtCPU(float *h_C,float *h_A,float *h_B,int vectorN,int elementN);

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%% Helper function, returning uniformly distributed %%%%%%
//%%%%%%%%%%%%%%%%%%%%% random float in [low, high] range %%%%%%%%%%%%%%%%%%%%%
float RandFloat(float low, float high)
{
    float t = (float)rand() / (float)RAND_MAX;
    return (1.0f - t) * low + t * high;
}

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%% Data configuration and Memory Allocation %%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//Total number of input vector pairs; arbitrary
const int VECTOR_N  = 256;

//Number of elements per vector; arbitrary, 
//but strongly preferred to be a multiple of warp size
//to meet memory coalescing constraints
const int ELEMENT_N = 4096;

//Total number of data elements
const int DATA_N    = VECTOR_N * ELEMENT_N;
const int DATA_SZ   = DATA_N * sizeof(float);
const int RESULT_SZ = VECTOR_N  * sizeof(float);

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%% Define local points to memory blocks
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 float *hDataInA, *hDataInB, *h_C_CPU, *h_C_GPU;
 float *dDataInA, *dDataInB, *dDataInC;
 double delta, ref, sum_delta, sum_ref, L1norm;
 unsigned int hTimer;

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// Safe shutdown routine: Adopted from EEE40xx Prac02 %%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
void do_shutdown( int argc, char **argv)
{
    printf("Shutting down...\n");
        cutilSafeCall( cudaFree(dDataInC) );
        cutilSafeCall( cudaFree(dDataInB));
        cutilSafeCall( cudaFree(dDataInA));
        free(h_C_GPU);
        free(h_C_CPU);
        free(hDataInB);
        free(hDataInA);
        // This may not be necessary unless we need to time something
        cutilCheckError(cutDeleteTimer(hTimer) );

        cudaThreadExit();
        cutilExit(argc, argv);
}
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

int main(int argc, char **argv)
{

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Lets try getting Device Information First
    cudaDeviceProp prop;
    int count;
    cudaGetDeviceCount(&count);
    for(int i=0; i< count; i++) 
    {
        //Get Device Properties using cudaGetDevieProperties(...)
        cudaGetDeviceProperties(&prop,i);
        //Displaying Device Information

        printf( "--- General Information for device %d ---\n", i );
        // Printing Device Name - i.e. GeForce GTX ...
        printf( "Name:%s\n", prop.name );
        // Print Compute Capability
        printf( "Compute capability:%d.%d\n", prop.major, prop.minor );
        //Print Clock Rate
        printf( "Clock rate: %d\n", prop.clockRate );
        //Can we simultaneously perform a cudaMemcpy() and kernel execution
        printf( "Device copy overlap:" );
        if(prop.deviceOverlap)
        {
            printf( "Enabled\n" );
        }
        else
        {
            printf( "Disabled\n" );
        }
        //Print Kernel Execution Time
        printf( "Kernel execition timeout :" );
        if (prop.kernelExecTimeoutEnabled)
            printf( "Enabled\n" );
        else
            printf( "Disabled\n" );
    
        //Print Memory Information
        printf( "--- Memory Information for device %d ---\n", i );
        //Total Global Memory
        printf( "Total global mem:%ld\n", prop.totalGlobalMem );
        // Total Constant Memory
        printf( "Total constant Mem:%ld\n", prop.totalConstMem );
        // Total Memory Pitch
        printf( "Max mem pitch:%ld\n", prop.memPitch );
        // Texture Alignment
        printf( "Texture Alignment:%ld\n", prop.textureAlignment );
        
        printf( "--- MP Information for device %d ---\n", i );
        // Printing MultiProcessor Count - 
        printf( "Multiprocessor count:%d\n",prop.multiProcessorCount );
        // Print Shared Memory
        printf( "Shared mem per mp:%ld\n", prop.sharedMemPerBlock );
        // Print Registers Per Block
        printf( "Registers per mp:%d\n", prop.regsPerBlock );
        // Print Threads Per Warp
        printf( "Threads in warp:%d\n", prop.warpSize );
        // Display Maximum Thread per Block
        printf( "Max threads per block:%d\n",prop.maxThreadsPerBlock );
        // Displaying Maximum Dimensions for each Thread
        printf( "Max thread dimensions:(%d, %d, %d)\n",prop.maxThreadsDim[0], prop.maxThreadsDim[1],prop.maxThreadsDim[2] );
        // Print Maximum Grid Dimensions
        printf( "Max grid dimensions: (%d, %d, %d)\n", prop.maxGridSize[0], prop.maxGridSize[1], prop.maxGridSize[2] );

        printf( "\n" );
    }
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%% Fill a cudaDeviceProp structure with the properties %%%%%%%%%%%%
    //%%%%%%%%% we need our device to have %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    cudaDeviceProp newprop;
    int newdev;

    cudaGetDevice( &newdev );
    printf( "ID of current CUDA device: %d\n", newdev );

    memset( &newprop, 0, sizeof( cudaDeviceProp ) );
    newprop.major = 1;
    newprop.minor = 3;

    cudaChooseDevice( &newdev, &newprop );
    printf( "ID of CUDA device closest to revision 1.3: %d\n",newdev);
    cudaSetDevice(newdev); // This maybe overidden by th cuSetDevice(...) below
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    int i; // counter
    // use command-line specified CUDA device, otherwise use device with highest Gflops/s
    if( cutCheckCmdLineFlag(argc, (const char**)argv, "device") )
    {
        cutilDeviceInit(argc, argv);
    }
    else
    {
        cudaSetDevice( cutGetMaxGflopsDeviceId() );
    }

    cutilCheckError( cutCreateTimer(&hTimer) );

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Your main code starts here

    printf("Initializing data...\n");
        printf("...allocating CPU memory.\n");
        hDataInA    = (float *)malloc(DATA_SZ);
        hDataInB    = (float *)malloc(DATA_SZ);
        h_C_CPU     = (float *)malloc(RESULT_SZ);
        h_C_GPU     = (float *)malloc(RESULT_SZ);

        printf("...allocating GPU memory.\n");
        cutilSafeCall( cudaMalloc((void **)&dDataInA, DATA_SZ)   );
        cutilSafeCall( cudaMalloc((void **)&dDataInB, DATA_SZ)   );
        cutilSafeCall( cudaMalloc((void **)&dDataInC, RESULT_SZ) );

        printf("Reading input data.\n");
        // Generating input data on CPU
        FILE* f = fopen("../DATA/array2D.csv","rt");
        if (f == 0) { // check that the file was found
            fprintf(stderr,"ERROR: cannot find file\n");
            do_shutdown(argc,argv);
            return -1;
           }

        // read the data one line at a time
        for(i = 0; i < DATA_N; i++){
            hDataInA[i] = 0.0f;
            hDataInB[i] = 0.0f;
            fscanf(f,"%f,%f\n",&hDataInA[i],&hDataInB[i]);
            if (i<10) printf("%f,%f\n",hDataInA[i],hDataInB[i]);
        }
        // close the file
        fclose(f);


        printf("...copying input data to GPU mem.\n");
        //Copy options data to GPU memory for further processing 
        cutilSafeCall( cudaMemcpy(dDataInA, hDataInA, DATA_SZ, cudaMemcpyHostToDevice) );
        cutilSafeCall( cudaMemcpy(dDataInB, hDataInB, DATA_SZ, cudaMemcpyHostToDevice) );
    printf("Data init done.\n");

    //Executing GPU Kernel
    printf("Executing GPU kernel...\n");
        cutilSafeCall( cudaThreadSynchronize() );
        cutilCheckError( cutResetTimer(hTimer) );
        cutilCheckError( cutStartTimer(hTimer) );
        firfilterhtGPU<<<128, 256>>>(dDataInC, dDataInA, dDataInB, VECTOR_N, ELEMENT_N);
        cutilCheckMsg("firfilterhtGPU() execution failed\n");
        cutilSafeCall( cudaThreadSynchronize() );
        cutilCheckError( cutStopTimer(hTimer) );
    printf("GPU time: %f msecs.\n", cutGetTimerValue(hTimer));

    //Reading Back GPU results
    printf("Reading back GPU result...\n");
    //Read back GPU results to compare them to CPU results
    cutilSafeCall( cudaMemcpy(h_C_GPU, dDataInC, RESULT_SZ, cudaMemcpyDeviceToHost) );


    printf("Checking GPU results...\n");
    
    printf("..running CPU scalar product calculation\n");
    firfilterhtCPU(h_C_CPU, hDataInA, hDataInB, VECTOR_N, ELEMENT_N);

        printf("...comparing the results\n");
        //Calculate max absolute difference and L1 distance
        //between CPU and GPU results
        sum_delta = 0;
        sum_ref   = 0;
        for(i = 0; i < VECTOR_N; i++){
            delta = fabs(h_C_GPU[i] - h_C_CPU[i]);
            ref   = h_C_CPU[i];
            sum_delta += delta;
            sum_ref   += ref;
        }
        L1norm = sum_delta / sum_ref;
    printf("L1 error: %E\n", L1norm);
    printf((L1norm < 1e-6) ? "TEST PASSED\n" : "TEST FAILED\n");

    do_shutdown(argc,argv);

}
