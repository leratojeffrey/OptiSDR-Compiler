import uct.rrsg.dsl.optisdr._
import scala.virtualization.lms.common.Record
import scala.reflect.SourceContext

object KaizerWindowApp extends OptiSDRApplicationRunner with KaizerWindow
trait KaizerWindow extends OptiSDRApplication
{ 
  	def main() = 
  	{
		val T = 32
		val K = 4096
  		val x = linspace(0,K*1024,K*1024)	
  		//val inp = SineWave(1,1024,0.01, 0, 0.2)
 		//val htcoeffs = kaiser(T) // 
		//val htcoeffs = FIRFilter.constcoeffs
		val htcoeffs = DenseVector(-0.0009854628648552658f,-0.001943327501939071f, -0.002274540064235561f, -0.0007930507357313603f, 0.003378131492599612f, 0.008793605106205245f, 0.01092629371993315f, 0.004480631269219782f, -0.01176547702292796f, -0.03085287295331204f, -0.0382128331144921f, -0.01836503052205008f, 0.03518209157622885f, 0.1129075605880721f, 0.1904985210087229f, 0.2390257600185619f, 0.2390257600185619f, 0.1904985210087229f, 0.1129075605880721f, 0.03518209157622885f, -0.01836503052205008f, -0.0382128331144921f, -0.03085287295331206f, -0.01176547702292797f, 0.004480631269219783f, 0.01092629371993315f, 0.008793605106205245f, 0.003378131492599612f, -0.0007930507357313603f, -0.002274540064235561f, -0.001943327501939074f, -0.0009854628648552658f);	
		val firout = fir(x,htcoeffs,T) //
		//
		//plot(htcoeffs)
		//
		//plot(firout)
		firout(0::1).pprint
			
  	}
}
