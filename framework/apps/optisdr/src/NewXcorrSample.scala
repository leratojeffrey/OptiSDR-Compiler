import uct.rrsg.dsl.optisdr._
import scala.virtualization.lms.common.Record
import scala.reflect.SourceContext

object XCorrSample extends OptiSDRApplicationRunner with xcorrapp
trait xcorrapp extends OptiSDRApplication
{ 
  	def main() = 
  	{
  		
			//val incx = DenseVector[Float](1,true)
			//
			val ftpoint = 2048
			//val L = ftpoint*130000						
			//val ml = 65000 // Output Matrix length
			//val chunk = ftpoint*ml
			//val streamout = ComplexDenseVector(L)
			//val outp = DenseMatrix[Float](100,4096*1300)
			//
			//val refsig = makeComplexVector("1 + 0i,0.993611310520008 + 0.112856384873482i,0.942990535892865 + 0.332819544522987i,0.844327925502015 + 0.535826794978997i,0.617859613090334 + 0.786288432136619i,0.32094360980721 + 0.947098304994744i,-0.125333233564304 + 0.992114701314478i,-0.546394346734269 + 0.837528040042142i,-0.910105970684996 + 0.414375580993284i,-0.990461425696651 + -0.137790290684638i,-0.684547105928689 + -0.728968627421411i,-0.0753268055279335 + -0.997158900260614i,0.656585755752956 + -0.754251380736104i,0.998026728428272 + -0.0627905195293133i,0.666011867434251 + 0.745941145424183i,-0.175023058975277 + 0.984564334529205i,-0.929776485888252 + 0.368124552684676i,-0.801566984870875 + -0.597904983057521i,0.19970998051441 + -0.979855052384246i,0.971631732914675 + -0.236498997023721i,0.535826794978993 + 0.844327925502017i,-0.627691361290704 + 0.77846230156702i,-0.893841424151261 + -0.448383216090038i,0.248689887164861 + -0.968583161128629i,0.988651744737913 + 0.150225589120765i,-0.0502443181797781 + 0.998736956606017i,-0.998026728428271 + -0.0627905195293228i,0.0753268055279431 + -0.997158900260613i,0.979855052384245 + 0.199709980514418i,-0.320943609807221 + 0.94709830499474i,-0.844327925502008 + -0.535826794979008i,0.720309024887917 + -0.693653305812795i,0.402906435713652 + 0.915241172620922i,-0.998026728428272 + 0.0627905195293002i,0.391373666837216 + -0.920231847365865i,0.647055961569432 + 0.762442511011458i,-0.99211470131448 + 0.125333233564287i,0.437115766650949 + -0.899405251566363i,0.414375580993266 + 0.910105970685004i,-0.965381638833268 + -0.260841506289917i,0.876306680043874 + -0.481753674101696i,-0.297041581577057 + 0.954864544746636i,-0.344642923174494 + -0.938733857653883i,0.844327925502001 + 0.535826794979019i,-0.999684189283299 + -0.0251300954433656i,0.87018375466954 + -0.492727341548266i,-0.587785252292493 + 0.809016994374933i,0.199709980514432 + -0.979855052384242i,0.112856384873454 + 0.993611310520012i,-0.414375580993258 + -0.910105970685008i,0.587785252292448 + 0.809016994374966i,-0.737513117358152 + -0.675332808121048i,0.793990398647815 + 0.607930297694633i,-0.844327925501996 + -0.535826794979027i,0.830595899195791 + 0.55687561648822i,-0.816339250717161 + -0.5775727034223i,0.728968627421383 + 0.684547105928719i,-0.627691361290666 + -0.778462301567051i,0.414375580993243 + 0.910105970685015i,-0.175023058975229 + -0.984564334529214i,-0.187381314585774 + 0.982287250728679i,0.52517462996134 + -0.850994481794665i,-0.85752665619368 + 0.51443953378146i,0.998026728428275 + -0.0627905195292574i,-0.863923417192806 + -0.503623201635811i,0.437115766650878 + 0.899405251566398i,0.248689887164902 + -0.968583161128619i,-0.816339250717213 + 0.577572703422226i,0.979855052384236 + 0.199709980514459i,-0.525174629961249 + -0.850994481794721i,-0.368124552684732 + 0.92977648588823i,0.96538163883329 + -0.260841506289839i,-0.711535677209241 + -0.702649969798894i,-0.248689887164918 + 0.968583161128615i,0.986685944207879 + -0.162637165194817i,-0.54639434673421 + -0.83752804004218i,-0.637423989748746 + 0.770513242775743i,0.925077206834429 + 0.379779095521871i,0.199709980514484 + -0.979855052384231i,-0.999921044203815 + -0.0125660398834334i,0.06279051952923 + 0.998026728428277i,0.990461425696663 + -0.137790290684553i,-0.100361714851126 + -0.994951016981309i,-0.998026728428277 + 0.0627905195292217i,-0.0878511965508375 + 0.996133609143164i,0.971631732914651 + 0.23649899702382i,0.481753674101803 + -0.876306680043815i,-0.720309024887835 + -0.69365330581288i,-0.91010597068504 + 0.414375580993187i,0.0502443181796602 + 0.998736956606023i,0.904827052465972 + 0.425779291565174i,0.801566984870946 + -0.597904983057426i,-0.0376901826698159 + -0.999289472640594i,-0.84432792550195 + -0.535826794979099i,-0.958521789017403 + 0.285019262469884i,-0.414375580993375 + 0.910105970684954i,0.309016994374849 + 0.951056516295185i,0.870183754669473 + 0.492727341548384i,0.993611310520021 + -0.112856384873373i,0.73751311735825 + -0.675332808120941i")
			//
			//val h_signal = load("/media/201x_NetRad/projects_general/201x_NetRad/ZA_Trials_2011_06/radarData/2011-06-04/e11_06_04_1740_34_P1_1_130000_S0_1_2047_node3.bin",L)
			//
			//println("Begining Batched Hilbert, XCorr and ParWhile Processing:");
			val tc2 = tic
			//var j = 0
			//val subchunk = 1300*2048;
			/*parwhile(j<100)
			{
				//stream(2048)
				//
				val htout = hilbert(h_signal(j*subchunk::j*subchunk+subchunk),ftpoint)
				outp(j) = xcorr(htout,refsig,ftpoint)  //xcorr(htout,refsig,2048) // TODO: Fix Zero Padding and the xcorr cuda function
				//sync(2048*100)
				j = j + 1
			}*/
			println("Done with ParWhile Test.."+toc(tc2))
			//imagesc(outp) //
  	}
}