import Liszt.Language._
import Liszt.MetaInteger._


@lisztcode
object VecArith {
	def main() {
		val a = Vec(1,2,3)
		val b = Vec(4.,5.,6.)
		val c = Vec(7.,8.,9.)
		val d = b + c
		val e = Vec(7,8,9) + a
		
		val f = 2.0 * b
		val g = b * 2.0
		val h = b * b
		
		val i = 2.0 / b
		val j = b / 2.0
		val k = b / b
		
		val l = Vec(Vec(1,2),Vec(3,4))
		val m = Vec(false,true)
		val n = b + b
		
		val o = Vec(true)
		val p = Vec("astring")
		val q = b - b
		
		val r = Vec(b.x,b.y,b.z)
		val s = b(_0)
		val t = Vec(1,2,3,4).w
		val u = dot(b,c)
		val v = cross(b,c)
		
		Print(a," ",b," ",c," ",d," ",e," ",f," ",g," ",h," ",i," ",j," ",k," ",l," ",m," ",n," ",o," ",p," ",q," ",r," ",s," ",t," ",u," ",v)

		val v1a = Vec(2.)
		val v1b = Vec(3.)
		val v2a = Vec(2.,3.)
		val v2b = Vec(5.,7.)
		val v3a = Vec(2.,3.,5.)
		val v3b = Vec(7.,11.,13.)
		val v4a = Vec(2.,3.,5.,7.)
		val v4b = Vec(11.,13.,17.,19.)
		val dot1 = dot(v1a, v1b)
		val dot2 = dot(v2a, v2b)
		val dot3 = dot(v3a, v3b)
		val dot4 = dot(v4a, v4b)
		Print(dot1, " ", dot2, " ", dot3, " ", dot4)  // 6, 10 + 21 = 31, 14 + 33 + 65 = 112, 22 + 39 + 85 + 133 = 279
		val normal1 = normalize(Vec(1.)) // (1)
		val normal2 = normalize(Vec(3.,4.))  // sqrt(9, 16) = 5, so (.6,.8)
		val normal3 = normalize(Vec(1.,4.,8.))  // sqrt(1 + 16 + 64) = 9, so (.111, .444, .888)
		val normal4 = normalize(Vec(1.,3.,3.,9.)) // sqrt(1 + 9 + 9 + 81) = 10, so (.1, .3, .3, .9)
		Print(normal1, " ", normal2, " ", normal3, " ", normal4)

		// Spec claims that min and max exist for Vectors
		val min1 = Vec(3) min Vec(1)  // (1)
		val min2 = Vec(1, 10) min Vec(5, 2)  // (1, 2)
		val min3 = Vec(1, 10, 15) min Vec(0, 20, 10) // (0, 10, 10)
		val min4 = Vec(0, 10, 5, 40) min Vec(5, 5, 5, 45) // (0, 5, 5, 40))
		Print(min1, " ", min2, " ", min3, " ", min4)

		val max1 = Vec(3) max Vec(1)  // (1)
		val max2 = Vec(1, 10) max Vec(5, 2)  // (1, 2)
		val max3 = Vec(1, 10, 15) max Vec(0, 20, 10) // (0, 10, 10)
		val max4 = Vec(0, 10, 5, 40) max Vec(5, 5, 5, 45) // (0, 5, 5, 40))
		
		val len = length(Vec(3.f,4.f))
		Print(max1, " ", max2, " ", max3, " ", max4, " ", len)
	}
}
