import Liszt.Language._
import Liszt.MetaInteger._

@lisztcode 
object MTest {
  val mya = 1
}
@lisztcode
object SCR {
  val test = MTest.mya
  val position = FieldWithLabel[Vertex,Vec[_3,Float]]("position")
  val interior_set = BoundarySet[Face]("default-interior")
  val inlet_set = BoundarySet[Face]("inlet")
  val outlet_set = BoundarySet[Face]("outlet")
  val far_field_set = BoundarySet[Face]("far_field")
  //val Vec(0.f,0.f,0.f) = Vec(0.f,0.f,0.f)

  val isInterior_face = FieldWithConst[Face,Int](0)
  val isOutlet_face = FieldWithConst[Face,Int](0)
  val isInlet_face = FieldWithConst[Face,Int](0)
  val isFarField_face = FieldWithConst[Face,Int](0)
  val insideID = FieldWithConst[Face,Int](0)
  val outsideID = FieldWithConst[Face,Int](0)

  val faceCenter = FieldWithConst[Face,Vec[_3,Float]](Vec(0.f,0.f,0.f))
  val faceArea = FieldWithConst[Face,Float](0.f)

  val Phi = FieldWithConst[Cell,Float](0.f)
  val Flux = FieldWithConst[Cell,Float](0.f)

  //some geometry fields
  val face_centroid = FieldWithConst[Face,Vec[_3,Float]](Vec(0.f,0.f,0.f))
  val face_area = FieldWithConst[Face,Float](0.f)
  val face_normal = FieldWithConst[Face,Vec[_3,Float]](Vec(0.f,0.f,0.f))
  val face_unit_normal = FieldWithConst[Face,Vec[_3,Float]](Vec(0.f,0.f,0.f))

  val cell_centroid = FieldWithConst[Cell,Vec[_3,Float]](Vec(0.f,0.f,0.f))
  val cell_volume = FieldWithConst[Cell,Float](0.f)
  
  //some HACK functions
  def determineInclusions() : Unit = {
    for(f <- interior_set) {
      isInterior_face(f) = 1;
    }
    for(f <- outlet_set) {
      isOutlet_face(f) = 1;
    }
    for(f <- inlet_set) {
      isInlet_face(f) = 1;
    }
    for(f <- far_field_set) {
      isFarField_face(f) = 1;
    }
    for(f <- faces(mesh)) {
      insideID(f) = ID(inside(f))
      outsideID(f) = ID(outside(f))
    }
  }

  //some geometry functions
  def calcFaceCenter(f : Face) : Vec[_3,Float] = {
  var center = Vec(0.f,0.f,0.f)
  val test = Vec(0.f,0.f,0.f,0.f)
  for(v <- vertices(f)) {
    center += position(v)
  }
  center = center / size(vertices(f))
  return center
  }
  def calcCellCenter(c : Cell) : Vec[_3,Float] = {
  var center = Vec(0.f,0.f,0.f)
  for(v <- vertices(c)) {
    center += position(v)
  }
  center = center / size(vertices(c))
  return center
  }
  def calcFaceGeom(f : Face) : Unit = {
  val approxCenter = calcFaceCenter(f)
  var normal = Vec(0.f,0.f,0.f)
  for(e <- edgesCCW(f)) {
    val v0 = position(head(e)) - approxCenter
    val v1 = position(tail(e)) - approxCenter
    normal += cross(v1,v0)
  }
  normal = normalize(normal)
  var center = Vec(0.f,0.f,0.f)
  var area = 0.f
  for(e <- edgesCCW(f)) {
    val v0 = position(head(e)) - approxCenter
    val v1 = position(tail(e)) - approxCenter
    val tmp_area = dot(normal,cross(v1,v0))
    area += tmp_area
    center += tmp_area * ( approxCenter + position(head(e)) + position(tail(e)))
  }  
  face_centroid(f) = center / (3.f * area)
  val farea = area / 2.f
  face_area(f) = farea
  face_normal(f) = normal*farea
  face_unit_normal(f) = normal
  }

  def calcCellGeom(c : Cell) : Unit = {
  val approxCenter = calcCellCenter(c)
  var volume = 0.f
  var center = Vec(0.f,0.f,0.f)
  for(f <- faces(c)) {
    val v0 = face_centroid(f) - approxCenter
    for(e <- edgesCCW(towards(f,c))) {
    val v1 = position(head(e)) - approxCenter
    val v2 = position(tail(e)) - approxCenter
    val tetVol = dot(v0,cross(v1,v2))
    volume += tetVol
    center += tetVol * ( approxCenter + face_centroid(f) + position(head(e)) + position(tail(e)))
    }
  }
  cell_centroid(c) = center / (volume * 4.f)
  cell_volume(c) = volume / 6.f
  }
  def phi_sine_function( t : Float) : Float = {
   return 10.f * sinf(t*2.f*MATH_PI)
  }
  def normal_pdf(x : Float) : Float = expf(- x * x / 2.f) / sqrtf(2.f * MATH_PI)
  def main() {
    determineInclusions()         // Initialize HACK

  val globalVelocity = Vec(1.f,0.f,0.f)
  //initialize geometry fields
  for(f <- faces(mesh)) {
    if(ID(outside(f)) < ID(inside(f))) {
    calcFaceGeom(flip(f))
    } else {
    calcFaceGeom(f)
    }
  }
  for(c <- cells(mesh)) {
    calcCellGeom(c)
  }
  
  // var ll = Vec(-1.f,-1.f,-1.f) //this needs to become a reduce...
  // var ur = Vec(1.f,1.f,1.f) //probably hard-code it for now?
  // for(v <- vertices(mesh)) {
  //   ll *<*= position(v)
  //   ur *>*= position(v)
  // }
  val mesh_center = Vec(0.5f,0.25f,0.25f) //hardcoded for the test mesh
  for(c <- cells(mesh)) {
    val center = cell_centroid(c)
	  val x = normal_pdf(center.x - mesh_center.x)
	  val y = normal_pdf(center.y - mesh_center.y)
	  val z = normal_pdf(center.z - mesh_center.z)
    Phi(c) = x * y * z
  }
  	for(f <- faces(mesh)) {
	  Print(ID(f),"FaceArea: ",face_area(f),"normal: ",face_unit_normal(f),"face_centroid",face_centroid(f))
	}
	for(c <- cells(mesh)) {
	  Print("c: ",ID(c)," ",cell_volume(c)," ",cell_centroid(c))
	}
  val deltat = .015f
  var t = 0.f
  for(c <- cells(mesh)) {
    	Print("before cell number: ",ID(c)," -> phi value: ",Phi(c))
  }
	while(t < 0.01f) {
		
		for(c <- cells(mesh)){
			for(f <- faces(c)){		
				if(isInterior_face(f) > 0){
					val normal = face_unit_normal(f)
					val vDotN = dot(globalVelocity,normal)
					val area = face_area(f)
					var flux = 0.f
					val cell = if(vDotN >= 0.f) inside(f) else outside(f)
					
					flux = area * vDotN * Phi(cell)
					if(ID(c) == insideID(f))
						Flux(c) -= flux
					if(ID(c) == outsideID(f))
						Flux(c) += flux
				}
				
				if(isOutlet_face(f) > 0){
					val normal = face_unit_normal(f)
					if(ID(outside(f)) == 0 && ID(c) == insideID(f))
						Flux(c) -= face_area(f) * dot(normal,globalVelocity) * Phi(c)
					else if(ID(c) == outsideID(f))
						Flux(c) -= face_area(f) * dot(-normal,globalVelocity) * Phi(c)
				}
				if(isInlet_face(f) > 0){
					if(ID(c) == outsideID(f)){
						val area = face_area(f)
						val vDotN = dot(globalVelocity,face_unit_normal(f))
						Flux(c) += area * vDotN * phi_sine_function(t)
					}
				}
				if(isFarField_face(f) > 0){
					val normal = face_unit_normal(f)
					
					if(ID(outside(f)) == 0 && ID(c) == insideID(f))
						Flux(c) -= dot(normal,globalVelocity) * face_area(f) * Phi(c)
					else if(ID(c) == outsideID(f))
						Flux(c) -= dot(-normal,globalVelocity) * face_area(f) * Phi(c)
				}
	
			}
		}
		for(c <- cells(mesh)) {
			Phi(c) += deltat * Flux(c) / cell_volume(c)
		}
		for(c <- cells(mesh)) {
			Flux(c) = 0.f
		}
		t += deltat
	}
	for(c <- cells(mesh)) {
			Print(ID(c), " ",Phi(c))
	}
  }
}
